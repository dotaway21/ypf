#!/usr/bin/env php
<?php
error_reporting(E_ALL);
ini_set('display_errors', 'on');
ini_set('limit_memory','512M');
date_default_timezone_set('Asia/Shanghai');

if(!extension_loaded('swoole')) 
{
	exit("swoole extension must be installed: https://github.com/swoole/swoole-src\n");
}

if(empty($argv[1]))
{
    echo "Usage: cli_worker {start|stop|restart|reload|kill|status}".PHP_EOL;
    exit;
}

$cmd = $argv[1];

define("__ROOT__",dirname(__DIR__));

define("__CONF__",__ROOT__. '/conf.d/cli');


require (__ROOT__ . '/Ypf/Ypf.php');


$ypfSetting = array(
	'root' => __ROOT__,
);

$app = new \Ypf\Ypf($ypfSetting);


//config
$config = new \Ypf\Lib\Config();
$config->load(__CONF__);

$load = new \Ypf\Lib\Load(__ROOT__);
$app->set('load', $load);

$app->set('config', $config);


$serv = new \swoole_server("/var/run/ypf.sock", 0, SWOOLE_PROCESS, SWOOLE_UNIX_STREAM);
//$serv = new \swoole_server("127.0.0.1", 1001,  SWOOLE_PROCESS, SWOOLE_SOCK_TCP);
$serv->set(array(
	'task_worker_num' => 8, //task num
	'worker_num' => 2,    //worker num
));    	

//cache 
//$cache = new \Ypf\Swoole\Cache(1024);
//$app->set('cache', $cache);


$serv->on("Receive",function() {    try    { }catch(Exception $e){ }});
$serv->on("Task", "\Ypf\Swoole\Task::task");
$serv->on("Finish", "\Ypf\Swoole\Task::finish");
$serv->on('WorkerStart', function ($serv, $worker_id){
	if($worker_id >= $serv->setting['worker_num']) {
		\swoole_set_process_name("cli_worker:task_worker $worker_id");
	}else{
		if(!$worker_id) {
			\Ypf\Swoole\Master::forkWorkers();		
		}
		\swoole_set_process_name("cli_worker:worker $worker_id");
		
	}
});
$serv->on('pipeMessage', function($serv, $src_worker_id, $data) {
	//echo "#{$serv->worker_id} message from #$src_worker_id: $data\n";
	$serv->task($data);
});
$serv->on("ManagerStart", function($serv) {
	\swoole_set_process_name("cli_worker:manager");
});
$config->set('swoole.serv', $serv);
\Ypf\Swoole\Master::setConfigPath(__CONF__);
switch($cmd)
{
    case 'start':
        job_run();
        break;
    case 'stop':
        job_stop();
        break;
    case 'restart':
        job_stop();
        job_run();
        break;
    case 'kill':
    	force_kill();
    	break;
    case 'reload':
        job_sig(SIGHUP);
        break;
    case 'status':
        job_sig(SIGUSR2);
        break;
    default:
        echo "Usage: " . $argv[0] . " {start|stop|restart|reload|kill|status}\n";
        exit;
        
}


function force_kill()
{
    $ret = $match = array();
    exec("ps aux | grep -E '".\Ypf\Swoole\Master::NAME."' | grep -v grep", $ret);
    $this_pid = posix_getpid();
    $this_ppid = posix_getppid();
    foreach($ret as $line)
    {
        if(preg_match("/^[\S]+\s+(\d+)\s+/", $line, $match))
        {
            $tmp_pid = $match[1];
            if($this_pid != $tmp_pid && $this_ppid != $tmp_pid)
            {
                posix_kill($tmp_pid, SIGKILL);
            }
        }
    }
}

function job_sig($sig)
{
    $pid = @file_get_contents(YPF_PID_FILE);
    if(empty($pid))
    {
        exit("server not running?\n");
    }
    posix_kill($pid, SIGINT );
}

function job_run()
{
	
	\Ypf\Swoole\Master::run();
}


