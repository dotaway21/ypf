#!/usr/bin/env php
<?php
error_reporting(E_ALL);
ini_set('display_errors', 'on');
ini_set('limit_memory','512M');
date_default_timezone_set('Asia/Shanghai');
if(0 === strpos(strtolower(PHP_OS), 'win'))
{
    exit("can not run on Windows operating system\n");
}

if(empty($argv[1]))
{
    echo "Usage: ypfjobber {start|stop|restart|reload|kill|status}".PHP_EOL;
    exit;
}

$cmd = $argv[1];

define("__ROOT__",dirname(__DIR__));

define("__CONF__",__ROOT__. '/conf.d/cli');

define('YPF_PID_FILE',  '/var/run/ypf.pid');

require (__ROOT__ . '/Ypf/Ypf.php');


$ypfSetting = array(
	'root' => __ROOT__,
);

$app = new \Ypf\Ypf($ypfSetting);


//config
$config = new \Ypf\Lib\Config();
$config->load(__CONF__);

$load = new \Ypf\Lib\Load(__ROOT__);
$app->set('load', $load);

$app->set('config', $config);

//log
$log = new \Ypf\Lib\Log('./debug.log');
$log->SetLevel(0);
$app->set('log', $log);

\Ypf\Cli\Master::setConfigPath(__CONF__);

switch($cmd)
{
    case 'start':
        job_run();
        break;
    case 'stop':
        job_stop();
        break;
    case 'restart':
        \Ypf\Cli\Master::run();
        break;
    case 'kill':
    	force_kill();
    	break;
    case 'reload':
        job_sig(SIGHUP);
        break;
    case 'status':
        job_sig(SIGUSR2);
        break;
    default:
        echo "Usage: " . $argv[0] . " {start|stop|restart|reload|kill|status}\n";
        exit;
        
}


function force_kill()
{
    $ret = $match = array();
    exec("ps aux | grep -E '".\Ypf\Cli\Master::NAME."' | grep -v grep", $ret);
    $this_pid = posix_getpid();
    $this_ppid = posix_getppid();
    foreach($ret as $line)
    {
        if(preg_match("/^[\S]+\s+(\d+)\s+/", $line, $match))
        {
            $tmp_pid = $match[1];
            if($this_pid != $tmp_pid && $this_ppid != $tmp_pid)
            {
                posix_kill($tmp_pid, SIGKILL);
            }
        }
    }
    if(is_file(YPF_PID_FILE)) unlink(YPF_PID_FILE);
}

function job_sig($sig)
{
    $pid = @file_get_contents(YPF_PID_FILE);
    if(empty($pid))
    {
        exit("server not running?\n");
    }
    posix_kill($pid, SIGINT );
}

function job_run()
{
	if(is_file(YPF_PID_FILE)) exit("server is running!\n");
	
	\Ypf\Cli\Master::run();
}

function job_stop()
{
	job_sig(SIGINT);
    if(is_file(YPF_PID_FILE)) unlink(YPF_PID_FILE);
}


